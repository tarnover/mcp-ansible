<?php
/**
 * Database Credentials
 * {{ ansible_managed }}
 * 
 * This file contains the database connection credentials.
 * It should be kept secure and not accessible from the web.
 */

// Database connection settings
define('DB_HOST', '{{ db_host | default("localhost") }}');
define('DB_PORT', {{ db_port | default(3306) }});
define('DB_NAME', '{{ db_name | default("lamp_db") }}');
define('DB_USER', '{{ db_user | default("dbuser") }}');
define('DB_PASSWORD', '{{ db_password | default("dbpassword") }}');
define('DB_CHARSET', 'utf8mb4');
define('DB_COLLATE', 'utf8mb4_unicode_ci');

// Database connection options
$db_options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   => false,
    PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci"
];

// Create a PDO instance
try {
    $pdo = new PDO(
        "mysql:host=" . DB_HOST . ";port=" . DB_PORT . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET,
        DB_USER,
        DB_PASSWORD,
        $db_options
    );
} catch (PDOException $e) {
    // Log the error but don't display it
    error_log('Database connection failed: ' . $e->getMessage());
    
    // In development, you might want to see the error
    {% if environment | default('production') != 'production' %}
    throw new PDOException($e->getMessage(), (int)$e->getCode());
    {% else %}
    // In production, show a generic error
    die("Database connection error. Please try again later.");
    {% endif %}
}

/**
 * Helper function to execute a query and return the results
 * 
 * @param string $sql The SQL query to execute
 * @param array $params Parameters to bind to the query
 * @return array|false The query results or false on failure
 */
function db_query($sql, $params = []) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetchAll();
    } catch (PDOException $e) {
        error_log('Query failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}

/**
 * Helper function to execute a query and return a single row
 * 
 * @param string $sql The SQL query to execute
 * @param array $params Parameters to bind to the query
 * @return array|false The first row or false on failure
 */
function db_query_row($sql, $params = []) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetch();
    } catch (PDOException $e) {
        error_log('Query failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}

/**
 * Helper function to execute a query and return a single value
 * 
 * @param string $sql The SQL query to execute
 * @param array $params Parameters to bind to the query
 * @return mixed|false The first column of the first row or false on failure
 */
function db_query_value($sql, $params = []) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute($params);
        return $stmt->fetchColumn();
    } catch (PDOException $e) {
        error_log('Query failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}

/**
 * Helper function to execute an insert, update, or delete query
 * 
 * @param string $sql The SQL query to execute
 * @param array $params Parameters to bind to the query
 * @return int|false The number of affected rows or false on failure
 */
function db_execute($sql, $params = []) {
    global $pdo;
    
    try {
        $stmt = $pdo->prepare($sql);
        $stmt->execute($params);
        return $stmt->rowCount();
    } catch (PDOException $e) {
        error_log('Query failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}

/**
 * Helper function to get the last inserted ID
 * 
 * @return string|false The last inserted ID or false on failure
 */
function db_last_insert_id() {
    global $pdo;
    
    try {
        return $pdo->lastInsertId();
    } catch (PDOException $e) {
        error_log('Last insert ID failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}

/**
 * Helper function to begin a transaction
 * 
 * @return bool True on success, false on failure
 */
function db_begin_transaction() {
    global $pdo;
    
    try {
        return $pdo->beginTransaction();
    } catch (PDOException $e) {
        error_log('Begin transaction failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}

/**
 * Helper function to commit a transaction
 * 
 * @return bool True on success, false on failure
 */
function db_commit() {
    global $pdo;
    
    try {
        return $pdo->commit();
    } catch (PDOException $e) {
        error_log('Commit failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}

/**
 * Helper function to rollback a transaction
 * 
 * @return bool True on success, false on failure
 */
function db_rollback() {
    global $pdo;
    
    try {
        return $pdo->rollBack();
    } catch (PDOException $e) {
        error_log('Rollback failed: ' . $e->getMessage());
        {% if environment | default('production') != 'production' %}
        throw new PDOException($e->getMessage(), (int)$e->getCode());
        {% else %}
        return false;
        {% endif %}
    }
}
